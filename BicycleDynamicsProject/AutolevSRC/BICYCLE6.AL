% JASON MOORE -- MAY 16, 2006
AUTOZ OFF
AUTORHS ALL
OVERWRITE ON
% DECLARE THE INERTIAL REFERENCE FRAME
NEWTONIAN N
% DECLARE THREE INTERMEDIATE FRAMES
FRAMES A,B,E
% DECLARE FOUR BODIES: REAR WHEEL,FRAME,FORK,FRONT WHEEL
BODIES C,D,F,G
% DECLARE FOUR POINTS: FRONT CONTACT POINT,REAR CONTACT POINT (ONE ON GROUND AND ONE ON WHEEL)
POINTS NC,CN,NG,GN
% DECLARE THE FRAME DIMENSIONS
CONSTANTS RF,RR,L{7},THETA
% DECLARE THE GENERALIZED COORDINATES
VARIABLES Q{5}',Q7',Q8',PITCH
MOTIONVARIABLES U{5}',U7',U8'

MASS C=MC,D=MD,F=MF,G=MG
INERTIA C,C1,C2,C3
INERTIA D,D1,D2,D3
INERTIA F,F1,F2,F3
INERTIA G,G1,G2,G3

% FRAME YAW
SIMPROT(N,A,3,Q3)
% FRAME ROLL
SIMPROT(A,B,-1,Q4)
% REAR WHEEL ROTATION
SIMPROT(B,C,2,Q5)
% FRAME PITCH
PITCH=(L2*COS(THETA)*COS(Q4)+L3*(SIN(Q4)*SIN(Q7)-SIN(THETA)*COS(Q4)*COS(Q7))-RR*COS(Q4)-RF*(-1+(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))^2)/(1-(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))^2)^0.5)/(COS(Q4)*(L1+L2*SIN(THETA)+L3*COS(THETA)*COS(Q7)+2*RF*COS(THETA)*SIN(Q7)*(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))/(1-(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))^2)^0.5+RF*COS(THETA)*SIN(Q7)*(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))*(-1+(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)&
*COS(Q4))^2)/(1-(SIN(Q4)*COS(Q7)+SIN(THETA)*SIN(Q7)*COS(Q4))^2)^1.5))
SIMPROT(B,D,-2,PITCH)
% HEAD TUBE ANGLE
SIMPROT(D,E,-2,THETA)
% STEERING ANGLE
SIMPROT(E,F,3,Q7)
% FRONT WHEEL ROTATION
SIMPROT(F,G,2,Q8)

% CALCULATE THE UNIT VECTOR ALONG THE LINE FROM GO TO GN
RFHAT>=UNITVEC(DOT(F2>,N3>)*F2>-N3>)
% BUILD THE POSITION VECTOR FROM THE INERTIAL ORIGIN TO NC
P_NO_NC>=Q1*N1>+Q2*N2>
% BUILD THE POSITION VECTOR FROM NC TO CN
P_NC_CN>=0>
% BUILD THE POSITION VECTOR FROM CN TO CO
P_CN_CO>=RR*B3>
% BUILD THE POSITION VECTOR FROM CO TO GO
P_CO_GO>=L1*D1>-L2*F3>+L3*F1>
% BUILD THE POSITION VECTOR FROM GO TO GN
P_GO_GN>=RF*RFHAT>
% BUILD THE POSITION VECTOR FROM GN TO NG
P_GN_NG>=0>
% BUILD THE POSITION VECTOR FROM CO TO DO
P_CO_DO>=L4*D1>+L5*D3>
% BUILD THE POSITION VECTOR FROM GO TO FO
P_GO_FO>=L6*F1>+L7*F3>

% DEFINE THE VELOCITY OF POINT NO
V_CO_N> = U3*B1> + U4*B2> + U1*N1> + U2*N2>
% DEFINE THE ANGULAR VELOCITIES
W_C_B> = U5*C2>
W_F_E> = U7*F3>
W_G_F> = U8*G2>

% DEFINE THE GENERALIZED SPEEDS
Q1'=U1
Q2'=U2
Q3'=-U3/RR/SIN(Q4)
Q4'=U4/RR
Q5'=U5
Q7'=U7
Q8'=U8

% CALCULATE THE VELOCITY OF POINT CN
V2PTS(N,C,CO,CN)
% CALCULATE THE VELOCITY OF POINT GO
V_GO_N>=EXPLICIT(DT(P_NO_GO>,N))
% CALCULATE THE VELOCITY OF POINT GN
V2PTS(N,G,GO,GN)
% CALCULATE THE VELOCITY OF POINT DO
V2PTS(N,D,CO,DO)
% CALCULATE THE VELOCITY OF POINT FO
V2PTS(N,F,GO,FO)

%DEP1=EXPLICIT(DOT(V_CN_N>,N1>))
%DEP2=EXPLICIT(DOT(V_CN_N>,N2>))
%DEP3=EXPLICIT(DOT(V_GN_N>,N1>))
%DEP4=EXPLICIT(DOT(V_GN_N>,N2>))
%SOLVE([DEP1;DEP2;DEP3;DEP4],U1,U2,U3,U8)

DEPENDENT[1]=EXPLICIT(DOT(V_CN_N>,N1>))
DEPENDENT[2]=EXPLICIT(DOT(V_CN_N>,N2>))
DEPENDENT[3]=EXPLICIT(DOT(V_GN_N>,N1>))
DEPENDENT[4]=EXPLICIT(DOT(V_GN_N>,N2>))
%CONSTRAIN(DEPENDENT[U1,U2,U3,U8])

%ALF_A_N>=DT(W_A_N>,N)
%ALF_B_A>=DT(W_B_A>,N)
%ALF_C_B>=DT(W_C_B>,N)
%ALF_D_B>=EXPLICIT(DT(W_D_B>,N))
%ALF_E_D>=DT(W_E_D>,N)
%ALF_F_E>=DT(W_F_E>,N)

%GRAVITY(-G*N3>,C,D,F,G)

% SAVE OUTPUT
SAVE BICYCLE6.ALL

